using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using MongoDB.Bson;
using MongoDB.Driver;
using NoteService.Models;

namespace NoteService.Repository
{
    [Authorize]
    public class NoteRepository : INoteRepository
    {
        //define a private variable to represent NoteContext
        NoteContext context;
        public NoteRepository(NoteContext _context)
        {
            context = _context;
        }

        //This method should be used to create a new note. NoteId should be autogenerated and
        // must start with 101.This should create a new NotUser if not exists else should push 
        //new note entry into existing NoteUser collection. UserId is identified by CreatedBy
        public bool CreateNote(Note note)
        {
            note.CreationDate = DateTime.Now;
            var c = context.Notes.Find(x => x.UserId == note.CreatedBy);             
            if (c != null && c.ToList().Count == 0)
            {
                NoteUser usernote = new NoteUser();
                usernote.UserId = note.CreatedBy;
                note.Id = 101;
                usernote.Notes.Add(note);
                context.Notes.InsertOne(usernote);
                return true;
            }
            else
            {
                var noteobject = c.FirstOrDefault();
                if (noteobject.Notes.Count() > 0)
                {
                    var maxid = noteobject.Notes.Max(x => x.Id);
                    note.Id = maxid + 1;
                }
                else
                {
                    note.Id = 101;
                }
                noteobject.Notes.Add(note);
                var r = context.Notes.ReplaceOne<NoteUser>(x => x.UserId == note.CreatedBy, noteobject);
                return r.IsAcknowledged && r.ModifiedCount > 0;
            }
        }

        //This method should be used to retreive all notes for a user
        public List<Note> FindAllNotesByUser(string userId)
        {
            var noteuser = this.context.Notes.Find<NoteUser>(x => x.UserId == userId).SingleOrDefault();
            if (noteuser != null)
                return noteuser.Notes;
            return null;

        }

        //This method should be used to delete a note for a specific user
        public bool DeleteNote(string userId, int noteId)
        {
            var c = context.Notes.Find(x => x.UserId == userId).SingleOrDefault();
            if (c == null || c.Notes.Count(x => x.Id == noteId) == 0)
            {
                return false;
            }
            c.Notes = c.Notes.Where(x => x.Id != noteId).ToList();

            var r = context.Notes.ReplaceOne<NoteUser>(x => x.UserId == userId, c);
            return r.IsAcknowledged && r.ModifiedCount > 0;
        }


        //This method is used to update an existing note for a user
        public bool UpdateNote(int noteId, string userId, Note note)
        {
            var builder = Builders<BsonDocument>.Filter;
            var usernote = context.Notes.Find(x => x.UserId == userId).SingleOrDefault();
            if (usernote == null)
                return false;
            var item = usernote.Notes.SingleOrDefault(x => x.Id == noteId);
            if (item == null)
                return false;
            item.Title = note.Title;
            item.Content = note.Content;

            var r = context.Notes.ReplaceOne<NoteUser>(x => x.UserId == userId, usernote);

            return r.IsAcknowledged && r.ModifiedCount > 0;
        }
    }
}
